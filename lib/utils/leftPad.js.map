{"version":3,"sources":["../../dev/mtui/utils/leftPad.jsx"],"names":["leftPad","str","len","ch","length","pad"],"mappings":";;;;;kBAAwBA,O;AAAT,SAASA,OAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,EAA5B,EAAgC;AAC7C;AACEF,QAAMA,MAAM,EAAZ;AACF;AACEC,QAAMA,MAAMD,IAAIG,MAAhB;AACF;AACE,MAAIF,OAAO,CAAX,EAAc;AAAC,WAAOD,GAAP;AAAY;AAC7B;AACE,MAAI,CAACE,EAAD,IAAOA,OAAO,CAAlB,EAAqB;AAACA,SAAK,GAAL;AAAU;AAClC;AACEA,OAAKA,KAAK,EAAV;AACF;AACE,MAAIE,MAAM,EAAV;AACF;AACE,SAAO,IAAP,EAAa;AACb;AACI,QAAIH,MAAM,CAAV,EAAa;AAACG,aAAOF,EAAP;AAAW;AAC7B;AACID,YAAQ,CAAR;AACJ;AACA;AACA;AACI,QAAIA,GAAJ,EAAS;AAACC,YAAMA,EAAN;AAAU;AACxB;AADI,SAEK;AAAC;AAAO;AAChB;AACH;AACE,SAAOE,MAAMJ,GAAb;AACH;;;;;;;;gCA5BuBD,O","file":"leftPad.js","sourcesContent":["export default function leftPad (str, len, ch) {\r\n  // convert `str` to `string`\r\n    str = str + '';\r\n  // `len` is the `pad`'s length now\r\n    len = len - str.length;\r\n  // doesn't need to pad\r\n    if (len <= 0) {return str;}\r\n  // `ch` defaults to `' '`\r\n    if (!ch && ch !== 0) {ch = ' ';}\r\n  // convert `ch` to `string`\r\n    ch = ch + '';\r\n  // `pad` starts with an empty string\r\n    var pad = '';\r\n  // loop\r\n    while (true) {\r\n    // add `ch` to `pad` if `len` is odd\r\n        if (len & 1) {pad += ch;}\r\n    // divide `len` by 2, ditch the remainder\r\n        len >>= 1;\r\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\r\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\r\n    // similar to finding a value in binary search tree, hence O(log(n))\r\n        if (len) {ch += ch;}\r\n    // `len` is 0, exit the loop\r\n        else {break;}\r\n    }\r\n  // pad `str`!\r\n    return pad + str;\r\n}"]}