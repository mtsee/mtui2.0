{"version":3,"sources":["../../dev/mtui/tree/Tree.jsx"],"names":["Tree","props","state","show","refBody","e","setState","className","children","header","other","cName","push","join","clickHeader","display","defaultProps","TreeChild"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;;;;;IAEMA,I;;;AAMF;AACA,kBAAaC,KAAb,EAAoB;AAAA;;AAAA,sIACVA,KADU;;AAAA;AAAA;AAAA;;AAEhB,cAAKC,KAAL,GAAa;AACTC,kBAAMF,MAAME;AADH,SAAb;AAGA,cAAKC,OAAL,GAAe,IAAf;AALgB;AAMnB;;;;;;;;;;;AAQD;0DANeC,C,EAAM;AACjB,iBAAKC,QAAL,CAAc;AACVH,sBAAM,CAAC,KAAKD,KAAL,CAAWC;AADR,aAAd;AAGH;;;iCAGO;AAAA,yBACkD,KAAKF,KADvD;AAAA,gBACGM,SADH,UACGA,SADH;AAAA,gBACcC,QADd,UACcA,QADd;AAAA,gBACwBC,MADxB,UACwBA,MADxB;AAAA,gBACgCN,IADhC,UACgCA,IADhC;AAAA,gBACyCO,KADzC;;AAEJ,gBAAIC,QAAQ,CAAC,SAAD,CAAZ;AACA,gBAAGJ,SAAH,EAAa;AACTI,sBAAMC,IAAN,CAAWL,SAAX;AACH;AACD,mBACI;AAAA;AAAA,2CAASG,KAAT,IAAgB,WAAWC,MAAME,IAAN,CAAW,GAAX,CAA3B;AACMJ,yBAAS;AAAA;AAAA,sBAAK,WAAU,gBAAf,EAAgC,SAAU,KAAKK,WAA/C;AACL,qBAAC,KAAKZ,KAAL,CAAWC,IAAZ,GAAmB,qCAAG,WAAU,mBAAb,GAAnB,GAA2D,qCAAG,WAAU,mBAAb,GADtD;AAC8FM;AAD9F,iBAAT,GACuH,IAF7H;AAII;AAAA;AAAA,sBAAK,WAAU,cAAf,EAA8B,OAAO,EAACM,SAAS,KAAKb,KAAL,CAAWC,IAAX,GAAkB,OAAlB,GAA4B,MAAtC,EAArC;AACKK;AADL;AAJJ,aADJ;AAUH;;;;;AAtCCR,I,CAEKgB,Y,GAAe;AAClBb,UAAM,IADY,E;;IAuCpBc,S;;;AACF;AACA,uBAAahB,KAAb,EAAoB;AAAA;AAAA,2IACVA,KADU;AAEnB;;;;iCAEO;AACJ,mBAAO;AAAA;AAAA,kBAAK,WAAU,eAAf;AAAgC,qBAAKA,KAAL,CAAWO;AAA3C,aAAP;AACH;;;;;AAGLR,KAAKiB,SAAL,GAAiBA,SAAjB;;AAEA;eACejB,I;;;;;;;;;kCAvDTA,I;;kCAyCAiB,S","file":"Tree.js","sourcesContent":["\r\nimport './style.scss';\r\nimport React, { Component } from 'react';\r\n\r\nclass Tree extends Component {\r\n\r\n    static defaultProps = {\r\n        show: true\r\n    }\r\n\r\n    // 构造函数\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            show: props.show\r\n        };\r\n        this.refBody = null;\r\n    }\r\n\r\n    clickHeader = (e) => {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    //\r\n    render(){\r\n        const {className, children, header, show, ...other} = this.props;\r\n        let cName = ['mt-tree'];\r\n        if(className){\r\n            cName.push(className);\r\n        }\r\n        return (\r\n            <div {...other} className={cName.join(' ')}>\r\n                { header ? <div className=\"mt-tree-header\" onClick={ this.clickHeader}>\r\n                    { !this.state.show ? <i className=\"iconfont icon-you\"></i> : <i className=\"iconfont icon-xia\"></i> }{header}</div> : null \r\n                }\r\n                <div className=\"mt-tree-body\" style={{display: this.state.show ? 'block' : 'none'}}>\r\n                    {children}\r\n                </div>\r\n            </div>\t\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeChild extends Component {\r\n    // 构造函数\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return <div className=\"mt-tree-child\">{this.props.children}</div>;\r\n    }\r\n}\r\n\r\nTree.TreeChild = TreeChild;\r\n\r\n// 主页\r\nexport default Tree;"]}